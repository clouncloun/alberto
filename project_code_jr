
import requests
import sqlite3
import json
import os 
import matplotlib
import matplotlib.pyplot as plt
import pandas as pd
#import geopandas as gpd
import seaborn as sns

# hi i have geopandas commented out bc it didnt work on my computer - feel free to change it back. thats the only change i made here! -audie

'''Get information from PetFinder API'''
def get_petfinder_data(SECRET, KEY, cur, conn):
    '''Call API to get information'''
    key = KEY
    secret = SECRET
    url = "https://api.petfinder.com/v2/oauth2/token"

    response = requests.post(url, data={
        "grant_type": "client_credentials",
        "client_id": key,
        "client_secret": secret
    })
    access_token = response.json()['access_token']
    url = 'https://api.petfinder.com/v2/animals'
    headers = { 'Authorization': f"Bearer {access_token}"}
    params = {}
    '''Collect animals for the database. The 25 limits to 25 per page, and the loop allows us to collect multiple pages per call'''
    collected_animals = []
    max_pages = 25
    current_page = 1
    limit = 25
    while current_page <= max_pages:
        try:
            params['page'] = current_page
            params['limit'] = limit
            got = requests.get(url, headers=headers, params=params)
            if got.status_code == 200:
                animal_data = got.json()
                # print(animal_data.keys())
                # print(f"The animal data is {json.dumps(animal_data, indent = 2)}")
                for animal in animal_data['animals']:
                    collected_animals.append(animal)
                # collected_animals.extend(animal_data)
                #print(f"Collected animals are {collected_animals}")
                current_page += 1
        except:
            print('Request Failed')
    
    
    '''Create the main data table with individual animal information'''
    cur.execute("""CREATE TABLE IF NOT EXISTS petfinder 
        (id INTEGER PRIMARY KEY AUTOINCREMENT, 
        name TEXT, 
        species INTEGER,
        breed INTEGER,
        age INTEGER,
        gender INTEGER,
        size INTEGER,
        good_with_children INTEGER,
        spayed_neutered INTEGER,
        house_trained INTEGER,
        state INTEGER
        )
    """)
    
    '''Creat the table for the keys for species'''
    species_list = []
    for animal in collected_animals:
        species = animal['species']
        if species not in species_list:
            species_list.append(species)
    cur.execute("""CREATE TABLE IF NOT EXISTS species (id INTEGER PRIMARY KEY, specie TEXT)""")
    for i in range(len(species_list)):
        cur.execute("""INSERT OR IGNORE INTO species (id, specie) VALUES (?,?)""", (i, species_list[i]))
    
    '''Create the table for the keys for the breeds'''
    breeds_list = []
    for animal in collected_animals:
        breed = animal['breeds']['primary']
        if breed not in breeds_list:
            breeds_list.append(breed)
    cur.execute("""CREATE TABLE IF NOT EXISTS breeds (id INTEGER PRIMARY KEY, breed TEXT)""")
    for i in range(len(breeds_list)):
        cur.execute("""INSERT OR IGNORE INTO breeds (id, breed) VALUES (?,?)""", (i, breeds_list[i]))
    
    '''Creat table for the keys for ages'''
    age_list = []
    for animal in collected_animals:
        age = animal['age']
        if age not in age_list:
            age_list.append(age)
    cur.execute("""CREATE TABLE IF NOT EXISTS ages (id INTEGER PRIMARY KEY, age TEXT)""")
    for i in range(len(age_list)):
        cur.execute("""INSERT OR IGNORE INTO ages (id, age) VALUES (?,?)""", (i,age_list[i]))

    '''Create the table for the genders'''
    gender_list = []
    for animal in collected_animals:
        gender = animal['gender']
        if gender not in gender_list:
            gender_list.append(gender)
    cur.execute("""CREATE TABLE IF NOT EXISTS genders (id INTEGER PRIMARY KEY, gender TEXT)""")
    for i in range(len(gender_list)):
        cur.execute("""INSERT OR IGNORE INTO genders (id, gender) VALUES (?,?)""", (i, gender_list[i]))

    '''Create table to tell us animal size'''
    size_list = []
    for animal in collected_animals:
        size = animal['size']
        if size not in size_list:
            size_list.append(size)
    cur.execute("""CREATE TABLE IF NOT EXISTS sizes (id INTEGER PRIMARY KEY, size)""")
    for i in range(len(size_list)):
        cur.execute("""INSERT OR IGNORE INTO sizes (id, size) VALUES (?,?)""", (i, size_list[i]))

    '''Create table to tell us if the animal is good with children'''
    child_list = []
    for animal in collected_animals:
        child = animal['environment']['children']
        if child not in child_list:
            child_list.append(child)
    cur.execute("""CREATE TABLE IF NOT EXISTS good_with_children (id INTEGER PRIMARY KEY, child)""")
    for i in range(len(child_list)):
        cur.execute("""INSERT OR IGNORE INTO good_with_children (id, child) VALUES (?,?)""", (i, child_list[i]))

    '''Create the table to tell us if the animal is spayed or not'''
    spay_list = []
    for animal in collected_animals:
        status = animal['attributes']['spayed_neutered']
        if status not in spay_list:
            spay_list.append(status)
    cur.execute("""CREATE TABLE IF NOT EXISTS spayed_neutered (id INTEGER PRIMARY KEY, status)""")
    for i in range(len(spay_list)):
        cur.execute("""INSERT OR IGNORE INTO spayed_neutered (id, status) VALUES (?,?)""", (i, spay_list[i]))
    
    '''Create a table to tell us if the animal is house trained'''
    house_list = []
    for animal in collected_animals:
        house = animal['attributes']['house_trained']
        if house not in house_list:
            house_list.append(house)
    cur.execute("""CREATE TABLE IF NOT EXISTS house_trained (id INTEGER PRIMARY KEY, house_trained)""")
    for i in range(len(house_list)):
        cur.execute("""INSERT OR IGNORE INTO house_trained (id, house_trained) VALUES (?,?)""", (i, house_list[i]))

    '''Create table to save the states that the animals are from'''
    state_list = []
    for animal in collected_animals:
        #print(animal)
        state = animal['contact']['address']['state']
        if state not in state_list:
            state_list.append(state)
    cur.execute("""CREATE TABLE IF NOT EXISTS states (id INTEGER PRIMARY KEY, state TEXT)""")
    for i in range(len(state_list)):
        cur.execute("""INSERT OR IGNORE INTO states (id, state) VALUES (?,?)""", (i, state_list[i]))

    '''Populate the perfinder table with the information from the API and the various tables'''
    id_counter = 0
    for animal in collected_animals:
        a_id = id_counter
        a_name = animal['name']
        pri_spc = animal['species']
        cur.execute("""SELECT * FROM species""")
        a_specie = 0
        for row in cur:
            if row[1] == pri_spc:
                a_specie = row[0]
        pri_breed = animal['breeds']['primary']
        cur.execute("""SELECT * FROM breeds""")
        a_breed = 0
        for row in cur:
            if row[1] == pri_breed:
                a_breed = row[0]
        pri_age = animal['age']
        cur.execute("""SELECT * FROM ages""")
        a_age = 0
        for row in cur:
            if row[1] == pri_age:
                a_age = row[0]
        pri_gender = animal['gender']
        cur.execute("""SELECT * FROM genders""")
        a_gender = 0
        for row in cur: 
            if row[1] == pri_gender:
                a_gender = row[0]
        pri_size = animal['size']
        cur.execute("""SELECT * FROM sizes""")
        a_size = 0
        for row in cur:
            if row[1] == pri_size:
                a_size = row[0]
        pri_children = animal['environment']['children']
        cur.execute("""SELECT * FROM good_with_children""")
        a_child = 0
        for row in cur:
            if row[1] == pri_children:
                a_child = row[0]
        pri_spay = animal['attributes']['spayed_neutered']
        cur.execute("""SELECT * FROM spayed_neutered""")
        a_spay = 0
        for row in cur:
            if row[1] == pri_spay:
                a_spay = row[0]
        pri_house = animal['attributes']['house_trained']
        cur.execute("""SELECT * FROM house_trained""")
        a_house = 0
        for row in cur:
            if row[1] == pri_house:
                a_house = row[0]
        pri_state = animal['contact']['address']['state']
        cur.execute("""SELECT * FROM states""")
        a_state = 0
        for row in cur: 
            if row[1] == pri_state:
                a_state = row[0]
        cur.execute("""INSERT OR IGNORE INTO petfinder 
                    (id, name, species, breed, age, gender, size, good_with_children, spayed_neutered, house_trained, state)
                    VALUES (?,?,?,?,?,?,?,?,?,?,?)""", (a_id, a_name, a_specie, a_breed, a_age, a_gender, a_size, a_child, a_spay, a_house, a_state))
        id_counter += 1
    conn.commit()

'''Create dictionary to tell us where most of the animals are comming from'''
def state_w_most_pets(cur):
    cur.execute("SELECT petfinder.state, states.id, states.state FROM petfinder JOIN states ON petfinder.state = states.id")
    state_dict = {}
    for item in cur:
        state = item[2]
        if state not in state_dict:
            state_dict[state] = 1
        else:
            state_dict[state] += 1
    sort_state = sorted(state_dict.items(), key=lambda item: item[1], reverse=True)
    return sort_state

'''Create method to see what animals are most commonly placed up for adoption'''
def breed_most_often(cur):
    cur.execute("SELECT petfinder.breed, breeds.id, breeds.breed FROM petfinder JOIN breeds ON petfinder.breed = breeds.id ")
    breed_dict = {}
    for item in cur:
        breed = item[2]
        if breed not in breed_dict:
            breed_dict[breed] = 1
        else:
            breed_dict[breed] += 1
    sort_breed = sorted(breed_dict.items(), key=lambda item: item[1], reverse=True)
    return sort_breed

'''Create methods to see what ages are most common'''
def age_most_common(cur):
    cur.execute("SELECT petfinder.age, ages.id, ages.age FROM petfinder JOIN ages ON petfinder.age = ages.id")
    age_dict = {}
    for item in cur:
        age = item[2]
        if age not in age_dict:
            age_dict[age] = 1
        else:
            age_dict[age] += 1
    sort_age = sorted(age_dict.items(), key=lambda item: item[1], reverse=True)
    return sort_age
        

''' Create the database we will use for the project'''
def set_up_database(db_name):
    path = os.path.dirname(os.path.abspath(__file__))
    conn = sqlite3.connect(path + "/" + db_name)
    cur = conn.cursor()
    return cur, conn

# '''Create a map visualization of pets'''
# def create_map_visualization(plt, gpd, pd, sns, data):
#     us_states = gpd.read_file('ne_110m_admin_1_states_provinces.shp')
#     us_states = us_states[us_states['admin'] == 'United States of America']
#     '''Set style for the map using the Seaborn package'''
#     sns.set_theme(style='whitegrid')
#     full_name_st = {'AL': 'Alabama', 'AK': 'Alaska', 'AZ': 'Arizona', 'AR': 'Arkansas', 'CA': 'California', 'CO': 'Colorado', 'CT': 'Connecticut', 'DE': 'Delaware',
#                      'FL': 'Florida', 'GA': 'Gerogia', 'HI': 'Hawaii', 'ID': 'Idaho', 'IL': "Illinois", 'IN': 'Indiana', 'IA': 'Iowa', 'KS': 'Kansas',
#                      'KY': 'Kentucky', 'LA': 'Louisiana', 'ME': 'Maine', 'MD': 'Maryland', 'MA': 'Massachusetts', 'MI': 'Michigan', 'MN': 'Minnesota', 'MS': 'Mississippi',
#                      'MO': 'Missouri', 'MT': 'Montana', 'NE': 'Nebraska', 'NV': 'Nevada', 'NH': 'New Hampshire', 'NJ': 'New Jersey', 'NM': 'New Mexico', 'NY': 'New York',
#                      'NC': 'North Carolina', 'ND': 'North Dakota', 'OH': 'Ohio', 'OK': 'Oklahoma', 'OR': 'Oregon', 'PA': 'Pennsylvania', 'RI': 'Rhode Island', 'SC': 'South Carolina',
#                      'SD': 'South Dakota', 'TN': 'Tennessee', 'TX': 'Texas', 'UT': 'Utah', 'VT': 'Vermont', 'VA': 'Virginia', 'WA': 'Washington', 'WV': 'West Virginia', 'WI': 'Wisconsin', 'WY': 'Wyoming'}
#     '''Convert the data into a datafram so that it can be used for the map'''
#     pet_data = pd.DataFrame.from_dict(data, orient='index', columns=['pet_count'])
#     pet_data.index.name = 'state_abbr'
#     pet_data.reset_index(inplace=True)
#     pet_data['state_name'] = pet_data['state_abbr'].map(full_name_st)
#     '''Merge my data wth the geographical data'''
#     merged = us_states.set_index('name').join(pet_data.set_index('state_name'))
#     fig, ax = plt.subplots(figsize=(15, 8), facecolor='#f5f5f5')
#     '''Create the map and make it so there are borders, labels, and a gradient'''
#     merged.plot(column='pet_count', ax=ax, cmap='YlOrRd', edgecolor='black', linewidth=0.5, legend=True, legend_kwds={'label': "Pet Population", 'shrink': 0.7, 'orientation': 'horizontal', 'pad': 0.02}, missing_kwds={'color': 'lightgrey', 'edgecolor': 'black', 'hatch': '///', 'label': 'No data'})
#     '''Add a label for every state'''
#     for idx, row in merged.iterrows():
#         centroid = row.geometry.centroid
#         ax.text(x=centroid.x, y=centroid.y, s=row.name[:2].upper(), fontsize=8, ha='center', va='center', color='black', bbox=dict(facecolor='white', alpha=0.7, edgecolor='none', boxstyle='round,pad=0.2'))
#     ax.set_title('Pet Population by US State', fontsize=16, pad=20)
#     '''Set background color'''
#     ax.set_facecolor('#e0e9f5')
#     '''Add a border around the map'''
#     for spine in ax.spines.values():
#         spine.set_visible(True)
#         spine.set_edgecolor('black')
#         spine.set_linewidth(2)
#     ax.axis('off')
#     plt.figtext(0.5, 0.01, 'Data Source: Natural Earth and PetFinder API | Visualization by Miranda Tess', ha="center", fontsize=9, color='gray')
#     plt.tight_layout()
#     return fig, ax

def main():
    getters = set_up_database('petfinder_pets.db')
    #info = get_petfinder_data('lfldIgN2VGYjNVrPSE52R3nXRB7mqYLkK7a9iNBh','dy5jlozijkrfKbzmZMMqcDLcozUdcZp2Yn4CR8tLlSGtIZrvH3', getters[0], getters[1])
    #info2 = get_petfinder_data('Be1fLhu25t4eDkpVgsJ8MwIT9ZzKXGG6Lf1tpICQ', 'KpqEFwFyfYCXkQH0XolYnDqqiIzOza95KeWPFEpu5zwflN9f25', getters[0], getters[1])
    states = state_w_most_pets(getters[0])
    breeds = breed_most_often(getters[0])
    ages = age_most_common(getters[0])
    states_dict = dict(states)
    ######fig, ax = create_map_visualization(plt, gpd, pd, sns, states_dict)
    plt.show()

if __name__ == "__main__":
    main()